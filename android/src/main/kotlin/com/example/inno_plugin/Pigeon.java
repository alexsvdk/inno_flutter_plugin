// Autogenerated from Pigeon (v3.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.inno_plugin;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SquareEquationResult {
    private @Nullable Double x1;
    public @Nullable Double getX1() { return x1; }
    public void setX1(@Nullable Double setterArg) {
      this.x1 = setterArg;
    }

    private @Nullable Double x2;
    public @Nullable Double getX2() { return x2; }
    public void setX2(@Nullable Double setterArg) {
      this.x2 = setterArg;
    }

    public static final class Builder {
      private @Nullable Double x1;
      public @NonNull Builder setX1(@Nullable Double setterArg) {
        this.x1 = setterArg;
        return this;
      }
      private @Nullable Double x2;
      public @NonNull Builder setX2(@Nullable Double setterArg) {
        this.x2 = setterArg;
        return this;
      }
      public @NonNull SquareEquationResult build() {
        SquareEquationResult pigeonReturn = new SquareEquationResult();
        pigeonReturn.setX1(x1);
        pigeonReturn.setX2(x2);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("x1", x1);
      toMapResult.put("x2", x2);
      return toMapResult;
    }
    static @NonNull SquareEquationResult fromMap(@NonNull Map<String, Object> map) {
      SquareEquationResult pigeonResult = new SquareEquationResult();
      Object x1 = map.get("x1");
      pigeonResult.setX1((Double)x1);
      Object x2 = map.get("x2");
      pigeonResult.setX2((Double)x2);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SquareEquationParams {
    private @NonNull Double a;
    public @NonNull Double getA() { return a; }
    public void setA(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"a\" is null.");
      }
      this.a = setterArg;
    }

    private @NonNull Double b;
    public @NonNull Double getB() { return b; }
    public void setB(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"b\" is null.");
      }
      this.b = setterArg;
    }

    private @NonNull Double c;
    public @NonNull Double getC() { return c; }
    public void setC(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"c\" is null.");
      }
      this.c = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SquareEquationParams() {}
    public static final class Builder {
      private @Nullable Double a;
      public @NonNull Builder setA(@NonNull Double setterArg) {
        this.a = setterArg;
        return this;
      }
      private @Nullable Double b;
      public @NonNull Builder setB(@NonNull Double setterArg) {
        this.b = setterArg;
        return this;
      }
      private @Nullable Double c;
      public @NonNull Builder setC(@NonNull Double setterArg) {
        this.c = setterArg;
        return this;
      }
      public @NonNull SquareEquationParams build() {
        SquareEquationParams pigeonReturn = new SquareEquationParams();
        pigeonReturn.setA(a);
        pigeonReturn.setB(b);
        pigeonReturn.setC(c);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("a", a);
      toMapResult.put("b", b);
      toMapResult.put("c", c);
      return toMapResult;
    }
    static @NonNull SquareEquationParams fromMap(@NonNull Map<String, Object> map) {
      SquareEquationParams pigeonResult = new SquareEquationParams();
      Object a = map.get("a");
      pigeonResult.setA((Double)a);
      Object b = map.get("b");
      pigeonResult.setB((Double)b);
      Object c = map.get("c");
      pigeonResult.setC((Double)c);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class PigeonInnoPluginCodec extends StandardMessageCodec {
    public static final PigeonInnoPluginCodec INSTANCE = new PigeonInnoPluginCodec();
    private PigeonInnoPluginCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return SquareEquationParams.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return SquareEquationResult.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof SquareEquationParams) {
        stream.write(128);
        writeValue(stream, ((SquareEquationParams) value).toMap());
      } else 
      if (value instanceof SquareEquationResult) {
        stream.write(129);
        writeValue(stream, ((SquareEquationResult) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PigeonInnoPlugin {
    void solveSqueareEquation(@NonNull SquareEquationParams params, Result<SquareEquationResult> result);

    /** The codec used by PigeonInnoPlugin. */
    static MessageCodec<Object> getCodec() {
      return PigeonInnoPluginCodec.INSTANCE;
    }

    /** Sets up an instance of `PigeonInnoPlugin` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PigeonInnoPlugin api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonInnoPlugin.solveSqueareEquation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              SquareEquationParams paramsArg = (SquareEquationParams)args.get(0);
              if (paramsArg == null) {
                throw new NullPointerException("paramsArg unexpectedly null.");
              }
              Result<SquareEquationResult> resultCallback = new Result<SquareEquationResult>() {
                public void success(SquareEquationResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.solveSqueareEquation(paramsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
